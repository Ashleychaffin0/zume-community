/******************************************************************

Stylesheet: Mixins & Constants Stylesheet

This is where you can take advantage of Sass' great features:
Mixins & Constants.

******************************************************************/

/*********************
TOOLS
*********************/

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}


/*********************
COLORS
*********************/


/*********************
TYPOGRAPHY
*********************/
/*	@font-face {
    	font-family: 'Font Name';
    	src: url('assets/fonts/font-name.eot');
    	src: url('assets/fonts/font-name.eot?#iefix') format('embedded-opentype'),
             url('assets/fonts/font-name.woff') format('woff'),
             url('assets/fonts/font-name.ttf') format('truetype'),
             url('assets/fonts/font-name.svg#font-name') format('svg');
    	font-weight: normal;
    	font-style: normal;
	}
*/

//Use the best ampersand - http://simplebits.com/notebook/2008/08/14/ampersands-2/
span.amp {
  font-family: Baskerville,'Goudy Old Style',Palatino,'Book Antiqua',serif !important;
  font-style: italic;
}

/*********************
CSS3 GRADIENTS.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

@mixin foundation-dropdown-menu {
    .dropdown.menu {
        @include dropdown-menu-direction(horizontal);

        a {
            @include disable-mouse-outline;
        }

        // Top-level item
        > li > a {
            padding: $dropdownmenu-padding;
        }

        // Top-level item active state
        > li.is-active > a {
            //background: $dropdown-menu-item-background-active;
            color: $dropdown-menu-item-color-active;
        }

        .no-js & ul {
            display: none;
        }

        .nested.is-dropdown-submenu {
            @include menu-nested($dropdownmenu-nested-margin);
        }

        &.vertical {
            @include dropdown-menu-direction(vertical);
        }

        @each $size in $breakpoint-classes {
            @if $size != $-zf-zero-breakpoint {
                @include breakpoint($size) {
                    &.#{$size}-horizontal {
                        @include dropdown-menu-direction(horizontal);
                    }

                    &.#{$size}-vertical {
                        @include dropdown-menu-direction(vertical);
                    }
                }
            }
        }

        &.align-right {
            .is-dropdown-submenu.first-sub {
                top: 100%;
                right: 0;
                left: auto;
            }
        }
    }

    .is-dropdown-menu.vertical {
        width: 100px;

        &.align-right {
            float: right;
        }
    }

    .is-dropdown-submenu-parent {
        position: relative;

        a::after {
            position: absolute;
            top: 50%;
            #{$global-right}: 5px;
            #{$global-left}: auto;
            margin-top: -1 * $dropdownmenu-arrow-size;
        }

        &.opens-inner > .is-dropdown-submenu {

            top: 100%;
            @if $global-text-direction == 'rtl' {
                right: auto;
            }
            @else {
                left: auto;
            }
        }

        &.opens-left > .is-dropdown-submenu {
            right: 100%;
            left: auto;
        }

        &.opens-right > .is-dropdown-submenu {
            right: auto;
            left: 100%;
        }
    }

    .is-dropdown-submenu {
        position: absolute;
        top: 0;
        #{$global-left}: 100%;
        z-index: 1;

        display: none;
        min-width: $dropdownmenu-min-width;

        border: $dropdownmenu-border;
        background: $dropdownmenu-submenu-background;

        .dropdown & a {
            padding: $dropdownmenu-submenu-padding;
        }

        .is-dropdown-submenu-parent {
            @if $dropdownmenu-arrows {
                @include zf-dropdown-left-right-arrows;
            }
        }

        @if (type-of($dropdownmenu-border-width) == 'number') {
            .is-dropdown-submenu {
                margin-top: (-$dropdownmenu-border-width);
            }
        }

        > li {
            width: 100%;
        }

        // [TODO] Cut back specificity
        //&:not(.js-dropdown-nohover) > .is-dropdown-submenu-parent:hover > &, // why is this line needed? Opening is handled by JS and this causes some ugly flickering when the sub is re-positioned automatically...
        &.js-dropdown-active {
            display: block;
        }
    }
}


